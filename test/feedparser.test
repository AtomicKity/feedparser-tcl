#!/usr/bin/env tclsh

source [file dirname [info script]]/helper.tcl

package require feedparser

incr cliutils::verbose

#
# Encoding tests

test enc_mapping "unknown" -body {
	feedparser::u::iana2tcl foobar
} -result ""

test enc_mapping "win" -body {
	feedparser::u::iana2tcl windows-1251
} -result cp1251


test getEncoding "win" -body {
	feedparser::u::getEncoding data/feeds/news.korr
} -result cp1251

test getEncoding "utf-8" -body {
	feedparser::u::getEncoding data/feeds/comp.rob_pike
} -result utf-8

test getEncoding "unknown" -body {
	feedparser::u::getEncoding data/feeds/empty.xml
} -result utf-8 -match glob \
	-errorOutput "*no encoding specified*"

test getEncoding "unknown" -body {
	feedparser::u::getEncoding data/feeds/broken.xml
} -result utf-8 -match glob \
	-errorOutput "*unknown encoding*"

#
# Idiotic emulation of a class

test objNew 0 -setup {
	set o [feedparser::objNew]
} -cleanup {
	$o objDelete
} -body {
	control::assert { "" == [$o entry 10 foobar] }
	control::assert { 0 == [$o size] }
	
	$o entrySet 0 author "uncle bob"
	$o entrySet 0 pubDate "2022"
	control::assert { "uncle bob" == [$o entry 0 author] }
	control::assert { "2022" == [$o entry 0 pubDate] }
	control::assert { "" == [$o entry 0 foobar] }
	control::assert { 1 == [$o size] }
	control::assert { {author {uncle bob} pubDate 2022} == [$o entryWhole 0] }
	
	$o headlineSet title {Sam {&} Joe}
	control::assert { "Sam {&} Joe" == [$o headline title] }

	$o entries
} -result {0 {author {uncle bob} pubDate 2022}}

test objNew "invalid headline param" -setup {
	set o [feedparser::objNew]
} -cleanup {
	$o objDelete
} -body {
	$o headlineSet foo "in bar"
} -returnCodes error \
	-result "invalid feed parameter 'foo': must be copyright, description, generator, link, managingEditor, title"

test objNew "invalid entry param" -setup {
	set o [feedparser::objNew]
} -cleanup {
	$o objDelete
} -body {
	$o entrySet 0 foo "in bar"
} -returnCodes error \
	-result "invalid entry parameter 'foo': must be author, author_email, comments, description, guid, link, pubDate, title"

#
# Feeds parsing

set korr [feedparser::u::parse data/feeds/news.korr]
set pike [feedparser::u::parse data/feeds/comp.rob_pike]

test parse "rss/2.0 headline" -body {
	$korr headlines
} -result {copyright {Copyright 2012 korrespondent.net} description {Новости на korrespondent.net} generator {} link http://korrespondent.net managingEditor korrespondent@korrespondent.net title {Новости на korrespondent.net}}

test parse "atom headline" -body {
	$pike headlines
} -result {copyright {} description {} generator Blogger link http://commandcenter.blogspot.com/ managingEditor {noreply@blogger.com (rob)} title {command center}}


test parse "rss/2.0 entries" -body {
	$korr size
} -result {20}

test parse "atom entries" -body {
	$pike size
} -result {12}

test parse "rss/2.0 entry 5" -body {
	array set e [$korr entryWhole 5]
	control::assert { $e(title) eq "Число погибших в Нью-Йорке достигло двух человек" }
	control::assert { $e(guid) == 1387250 }
	control::assert { [regexp -- "Русская служба Би-би-си" $e(description)] }
	control::assert { [regexp -- "korrespondent.net/world/1387250" $e(link)] }
	control::assert { [regexp -- "#comment_header_layer" $e(comments)] }
	control::assert { $e(author_email) == "" }
	control::assert { $e(author) == "32057" }
	
	return $e(pubDate)
} -result {1345836360}

test parse "atom entry 1" -body {
	array set e [$pike entryWhole 1]
	control::assert { $e(title) eq "The byte order fallacy" }
	control::assert { $e(guid) eq "tag:blogger.com,1999:blog-6983287.post-204147499802585288" }
	control::assert { [regexp -- "Just last week I was reviewing" $e(description)] }
	control::assert { $e(link) eq "http://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html" }
	control::assert { $e(comments) == "" }
	control::assert { $e(author_email) eq "noreply@blogger.com" }
	control::assert { $e(author) eq "rob" }
	
	return $e(pubDate)
} -result {1333601367}
