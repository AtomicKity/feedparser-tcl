#!/usr/bin/env tclsh

source [file dirname [info script]]/helper.tcl

package require feedparser

incr cliutils::verbose

#
# Encoding tests
#

test enc_mapping "unknown" -body {
	feedparser::u::iana2tcl foobar
} -result ""

test enc_mapping "win" -body {
	feedparser::u::iana2tcl windows-1251
} -result cp1251


test getEncoding "win" -body {
	feedparser::u::getEncoding data/feeds/news.korr
} -result cp1251

test getEncoding "utf-8" -body {
	feedparser::u::getEncoding data/feeds/comp.rob_pike
} -result utf-8

test getEncoding "unknown" -body {
	feedparser::u::getEncoding data/feeds/empty.xml
} -result utf-8 -match glob \
	-errorOutput "*no encoding specified*"

test getEncoding "unknown" -body {
	feedparser::u::getEncoding data/feeds/broken.xml
} -result utf-8 -match glob \
	-errorOutput "*unknown encoding*"


#
# Idiotic emulation of a class
#

test objNew 0 -setup {
	set o [feedparser::objNew]
} -cleanup {
	$o objDelete
} -body {
	control::assert { "" == [$o entry 10 foobar] }
	control::assert { 0 == [$o size] }
	
	$o entrySet 0 author "uncle bob"
	$o entrySet 0 pubDate "2022"
	control::assert { "uncle bob" == [$o entry 0 author] }
	control::assert { "2022" == [$o entry 0 pubDate] }
	control::assert { "" == [$o entry 0 foobar] }
	control::assert { 1 == [$o size] }
	control::assert { {author {uncle bob} pubDate 2022} == [$o entryWhole 0] }
	
	$o headlineSet title {Sam {&} Joe}
	control::assert { "Sam {&} Joe" == [$o headline title] }

	$o entries
} -result {0 {author {uncle bob} pubDate 2022}}

test objNew "invalid headline param" -setup {
	set o [feedparser::objNew]
} -cleanup {
	$o objDelete
} -body {
	$o headlineSet foo "in bar"
} -returnCodes error \
	-result "invalid feed parameter 'foo': must be copyright, description, generator, link, managingEditor, title"

test objNew "invalid entry param" -setup {
	set o [feedparser::objNew]
} -cleanup {
	$o objDelete
} -body {
	$o entrySet 0 foo "in bar"
} -returnCodes error \
	-result "invalid entry parameter 'foo': must be author, author_email, comments, description, guid, link, pubDate, title"


#
# Feeds parsing
#

set korr [feedparser::u::parse data/feeds/news.korr]
set pike [feedparser::u::parse data/feeds/comp.rob_pike]

test parse "rss/2.0 headline" -body {
	$korr headlines
} -result {copyright {Copyright 2012 korrespondent.net} description {Новости на korrespondent.net} generator {} link http://korrespondent.net managingEditor korrespondent@korrespondent.net title {Новости на korrespondent.net}}

test parse "atom headline" -body {
	$pike headlines
} -result {copyright {} description {} generator Blogger link http://commandcenter.blogspot.com/ managingEditor {noreply@blogger.com (rob)} title {command center}}


test parse "rss/2.0 entries" -body {
	$korr size
} -result {20}

test parse "atom entries" -body {
	$pike size
} -result {12}

test parse "rss/2.0 entry 5" -body {
	array set e [$korr entryWhole 5]
	control::assert { $e(title) eq "Число погибших в Нью-Йорке достигло двух человек" }
	control::assert { $e(guid) == 1387250 }
	control::assert { [regexp -- "Русская служба Би-би-си" $e(description)] }
	control::assert { [regexp -- "korrespondent.net/world/1387250" $e(link)] }
	control::assert { [regexp -- "#comment_header_layer" $e(comments)] }
	control::assert { $e(author_email) == "" }
	control::assert { $e(author) == "32057" }
	
	return $e(pubDate)
} -result {1345836360}

test parse "atom entry 1" -body {
	array set e [$pike entryWhole 1]
	control::assert { $e(title) eq "The byte order fallacy" }
	control::assert { $e(guid) eq "tag:blogger.com,1999:blog-6983287.post-204147499802585288" }
	control::assert { [regexp -- "Just last week I was reviewing" $e(description)] }
	control::assert { $e(link) eq "http://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html" }
	control::assert { $e(comments) == "" }
	control::assert { $e(author_email) eq "noreply@blogger.com" }
	control::assert { $e(author) eq "rob" }
	
	return $e(pubDate)
} -result {1333601367}


#
# Date parsing
#

test parseDate "empty string" -body {
	feedparser::dom::parseDate ""
} -result -1

test parseDate 0 -body {
	feedparser::dom::parseDate "1985-04-12T23:20:50.52Z"
} -result 482196050

test parseDate 0 -body {
	feedparser::dom::parseDate "1996-12-19T16:39:57-08:00"
} -result 851042397

test parseDate 0 -body {
	feedparser::dom::parseDate "1990-12-31T23:59:60Z"
} -result 662688000

test parseDate 0 -body {
	feedparser::dom::parseDate "1990-12-31T15:59:60-08:00"
} -result 662688000

test parseDate 0 -body {
	feedparser::dom::parseDate "1937-01-01T12:00:27.87+00:20"
} -result -1041337173

test parseDate 0 -body {
	feedparser::dom::parseDate "2006-11-12T23:04:24-06:00"
} -result 1163394264

test parseDate 0 -body {
	feedparser::dom::parseDate "Fri, 21 Nov 1997 09:55:06 -0600"
} -result 880127706

test parseDate 0 -body {
	feedparser::dom::parseDate "Fri, 21 Nov 97 09:55:06 -0600"
} -result 880127706

test parseDate 0 -body {
	feedparser::dom::parseDate "Wed, 26 Mar 2008 07:12:24 PST"
} -result 1206544344

test parseDate 0 -body {
	feedparser::dom::parseDate "15 Oct 2008 22:34:20 EST"
} -result 1224128060


#
# Nodes getters (mostly for plugins)
#

set sample0_xml {<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/"
	 xmlns:atom="http://www.w3.org/2005/Atom"
	 xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	 xmlns:dc="http://purl.org/dc/elements/1.1/"
	 xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	 xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	 xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"
	 version="2.0">
<channel>
	<title>tdom test</title>
</channel>
	<item>
	<dc:date>Mon, 27 Aug 2012 04:00:00 +0000</dc:date>
	<dc:date>Mon, 28 Aug 2012 04:00:00 +0000</dc:date>
	</item>
<item>
	<pubDate>Mon, 10 Aug 2020 04:00:00 +0000</pubDate>
	<dc:title>Flemsday</dc:title>
	<dc:title>Flemsday</dc:title>
	<dc:creator>John Doe</dc:creator>
	<dc:description>a text</dc:description>
	<dc:description>text 2</dc:description>
	<dc:creator>John Doe</dc:creator>
</item>
</rss>}
set sample0_doc [dom parse $sample0_xml]
set sample0_node [$sample0_doc documentElement]
set sample0_entries [$sample0_node selectNodes {//*[local-name()='item' or local-name()='entry']}]

test nodesGetAsText "dc:date" -body {
	set r [list]
	foreach idx $sample0_entries {
		lappend r [feedparser::dom::nodesGetAsText $idx \
					   {dublin "http://purl.org/dc/elements/1.1/"} \
					   "date"]
	}
	return $r
} -result {{{Mon, 27 Aug 2012 04:00:00 +0000} {Mon, 28 Aug 2012 04:00:00 +0000}} {}}

test pluginsLoad "all" -body {
	return $::feedparser::pluginsList
} -result {dcmes}

test dcmes-plugin 0 -body {
	set feed [::feedparser::dom::parse $sample0_xml]
	$feed entryWhole 1
} -result {description {a text} pubDate 1597032000 guid {} title Flemsday link {} comments {} author_email {} author {John Doe}}


# statistics
cleanupTests
